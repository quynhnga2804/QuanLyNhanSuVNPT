const Employee = require("../models/employeeModel");
const JobProfile = require("../models/jobProfileModel");
const PersonalProfile = require("../models/personalProfileModel");
const FamilyMember = require("../models/familyMemberModel");
const Department = require('../models/departmentModel');
const User = require('../models/userModel');
const jwt = require("jsonwebtoken");
const nodemailer = require("nodemailer");
const { hash, verify } = require("../utils/passwordUtils");
require("dotenv").config();

const EMAIL_USER = process.env.EMAIL_USER;
const EMAIL_PASS = process.env.EMAIL_PASS;

const transporter = nodemailer.createTransport({
    service: "gmail",
    auth: { user: EMAIL_USER, pass: EMAIL_PASS },
});

function generateOTP() {
    return Math.floor(100000 + Math.random() * 900000).toString();
}

// L∆∞u OTP t·∫°m th·ªùi
const otpStorage = {};

// H√†m t√¨m EmployeeID theo email v√† ki·ªÉm tra quy·ªÅn truy c·∫≠p
const getEmployeeIDByEmail = async (email, role) => {
    if (role !== 'User') {
        throw new Error("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p!");
    }

    console.log(`üîç T√¨m EmployeeID v·ªõi email: ${email}`);
    const employee = await Employee.findOne({
        where: { WorkEmail: email },
        attributes: ["EmployeeID"] // Ch·ªâ l·∫•y EmployeeID ƒë·ªÉ t·ªëi ∆∞u truy v·∫•n
    });

    if (!employee) {
        console.error("‚ùå Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n v·ªõi email n√†y!");
        throw new Error("Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n");
    }

    console.log(`‚úÖ T√¨m th·∫•y EmployeeID: ${employee.EmployeeID}`);
    return employee.EmployeeID;
};

// L·∫•y th√¥ng tin nh√¢n vi√™n
exports.getEmployeeInfo = async (req, res) => {
    try {
        const { email, role } = req.user;
        const employeeID = await getEmployeeIDByEmail(email, role);

        console.log(`üîç L·∫•y th√¥ng tin nh√¢n vi√™n v·ªõi ID: ${employeeID}`);
        // const employeeInfo = await Employee.findOne({ where: { EmployeeID: employeeID } });
        const employeeInfo = await Employee.findOne({
            where: { EmployeeID: employeeID },
            include: {
                model: Department, // Li√™n k·∫øt v·ªõi b·∫£ng Department
                attributes: ['DepartmentName'] // Ch·ªâ l·∫•y DepartmentName
            }
        });

        if (!employeeInfo) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n" });
        }
        res.json(employeeInfo);
    } catch (error) {
        res.status(error.message === "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p!" ? 403 : 500).json({ 
            message: error.message 
        });
    }
};

// L·∫•y th√¥ng tin c√¥ng vi·ªác (JobProfile)
exports.getJobProfile = async (req, res) => {
    try {
        const { email, role } = req.user;
        const employeeID = await getEmployeeIDByEmail(email, role);

        console.log(`üîç L·∫•y th√¥ng tin c√¥ng vi·ªác v·ªõi ID: ${employeeID}`);
        const jobProfile = await JobProfile.findOne({ where: { EmployeeID: employeeID } });

        if (!jobProfile) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin c√¥ng vi·ªác" });
        }
        res.json(jobProfile);
    } catch (error) {
        res.status(error.message === "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p!" ? 403 : 500).json({ 
            message: error.message 
        });
    }
};

// L·∫•y th√¥ng tin c√° nh√¢n (PersonalProfile)
exports.getPersonalProfile = async (req, res) => {
    try {
        const { email, role } = req.user;
        const employeeID = await getEmployeeIDByEmail(email, role);
        const personalProfile = await PersonalProfile.findOne({ where: { EmployeeID: employeeID } });

        if (!personalProfile) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin c√° nh√¢n" });
        }
        res.json(personalProfile);
    } catch (error) {
        res.status(error.message === "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p!" ? 403 : 500).json({ 
            message: error.message 
        });
    }
};

// L·∫•y th√¥ng tin ng∆∞·ªùi th√¢n (FamilyMember)
exports.getFamilyMember = async (req, res) => {
    try {
        const { email, role } = req.user;
        const employeeID = await getEmployeeIDByEmail(email, role);

        console.log(`üîç L·∫•y th√¥ng tin ng∆∞·ªùi th√¢n v·ªõi ID: ${employeeID}`);
        const familyMembers = await FamilyMember.findAll({ where: { EmployeeID: employeeID } });

        if (!familyMembers || familyMembers.length === 0) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi th√¢n" });
        }
        res.json(familyMembers);
    } catch (error) {
        res.status(error.message === "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p!" ? 403 : 500).json({ 
            message: error.message 
        });
    }
};


// G·ª≠i OTP
// G·ª≠i OTP (Ch·ªâ g·ª≠i khi m·∫≠t kh·∫©u h·ª£p l·ªá)
exports.sendOTP = async (req, res) => {
    try {
        const { email } = req.user;
        const { oldPassword, newPassword, confirmPassword } = req.body;

        // L·∫•y user theo email
        const user = await User.findOne({ where: { WorkEmail: email } });
        if (!user) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n!" });
        }

        // Ki·ªÉm tra m·∫≠t kh·∫©u c≈© c√≥ ƒë√∫ng kh√¥ng
        const isMatch = await verify(user.Password, oldPassword);
        if (!isMatch) {
            return res.status(400).json({ message: "M·∫≠t kh·∫©u c≈© kh√¥ng ch√≠nh x√°c!" });
        }

        // Ki·ªÉm tra m·∫≠t kh·∫©u m·ªõi v√† nh·∫≠p l·∫°i m·∫≠t kh·∫©u c√≥ kh·ªõp kh√¥ng
        if (newPassword !== confirmPassword) {
            return res.status(400).json({ message: "M·∫≠t kh·∫©u m·ªõi kh√¥ng kh·ªõp!" });
        }

        // N·∫øu t·∫•t c·∫£ ƒë·ªÅu h·ª£p l·ªá, t·∫°o OTP v√† g·ª≠i email
        const otp = generateOTP();
        otpStorage[email] = { otp, expiresAt: Date.now() + 60000 };

        const mailOptions = {
            from: `"VNPT Ngh·ªá An" <${EMAIL_USER}>`,
            to: email,
            subject: "M√£ OTP ƒë·ªïi m·∫≠t kh·∫©u",
            text: `M√£ OTP ƒë·ªïi m·∫≠t kh·∫©u c·ªßa b·∫°n l√†: ${otp}. M√£ n√†y c√≥ hi·ªáu l·ª±c trong 1 ph√∫t.`,
        };
        await transporter.sendMail(mailOptions);
        
        res.json({ message: "OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i! H√£y ki·ªÉm tra email c·ªßa b·∫°n!" });
    } catch (error) {
        res.status(500).json({ message: "Kh√¥ng th·ªÉ g·ª≠i OTP!", error: error.message });
    }
};


// ƒê·ªïi m·∫≠t kh·∫©u
exports.ChangePassword = async (req, res) => {
    try {
        console.log(`üîí Y√™u c·∫ßu ƒë·ªïi m·∫≠t kh·∫©u t·ª´ ${req.user.email}`);
        const { email } = req.user;
        const { newPassword, otp } = req.body;

        // Ki·ªÉm tra OTP
        if (!otpStorage[email] || otpStorage[email].otp !== otp || Date.now() > otpStorage[email].expiresAt) {
            return res.status(400).json({ message: "OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n" });
        }

        delete otpStorage[email]; // X√≥a OTP sau khi s·ª≠ d·ª•ng

        // M√£ h√≥a m·∫≠t kh·∫©u m·ªõi
        const hashedPassword = await hash(newPassword);
        
        // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u trong database
        await User.update({ Password: hashedPassword }, { where: { WorkEmail: email } });

        console.log("‚úÖ M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi th√†nh c√¥ng");
        res.json({ message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i." });
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};
