const Employee = require("../models/employeeModel");
const JobProfile = require("../models/jobProfileModel");
const PersonalProfile = require("../models/personalProfileModel");
const FamilyMember = require("../models/familyMemberModel");
const Department = require('../models/departmentModel');
const User = require('../models/userModel');
const Notification = require('../models/notificationModel');
const UserNotification = require('../models/userNotificationModel');
const LaborContract = require('../models/laborcontractModel');
const EmployeeContract = require('../models/employeecontractModel');
const jwt = require("jsonwebtoken");
const nodemailer = require("nodemailer");
const { hash, verify } = require("../utils/passwordUtils");
const Attendance = require("../models/attendanceModel");
const PayrollCycle = require("../models/payrollCycleModel");
const { OverTime } = require("../models/indexModel");
const MonthlySalary = require("../models/monthlysalaryModel");
const Resignation = require("../models/resignationModel");

require("dotenv").config();

const EMAIL_USER = process.env.EMAIL_USER;
const EMAIL_PASS = process.env.EMAIL_PASS;

const transporter = nodemailer.createTransport({
    service: "gmail",
    auth: { user: EMAIL_USER, pass: EMAIL_PASS },
});

function generateOTP() {
    return Math.floor(100000 + Math.random() * 900000).toString();
}

// L∆∞u OTP t·∫°m th·ªùi
const otpStorage = {};

// H√†m t√¨m EmployeeID theo email v√† ki·ªÉm tra quy·ªÅn truy c·∫≠p
const getEmployeeIDByEmail = async (email, role) => {
    if (role !== 'User') {
        throw new Error("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p!");
    }

    const employee = await Employee.findOne({
        where: { WorkEmail: email },
        attributes: ["EmployeeID"]
    });

    if (!employee) {
        console.error("‚ùå Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n v·ªõi email n√†y!");
        throw new Error("Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n");
    }
    return employee.EmployeeID;
};

// L·∫•y th√¥ng tin nh√¢n vi√™n
exports.getEmployeeInfo = async (req, res) => {
    try {
        const { email, role } = req.user;
        const employeeID = await getEmployeeIDByEmail(email, role);
        const employeeInfo = await Employee.findOne({
            where: { EmployeeID: employeeID },
            include: {
                model: Department, 
                attributes: ['DepartmentName'] 
            }
        });

        if (!employeeInfo) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n" });
        }
        res.json(employeeInfo);
    } catch (error) {
        res.status(error.message === "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p!" ? 403 : 500).json({ 
            message: error.message 
        });
    }
};

//L·∫•y th√¥ng tin h·ª£p ƒë·ªìng
exports.getContractUser = async (req, res) => {
    try {
        const { email, role } = req.user;
        const employeeID = await getEmployeeIDByEmail(email, role);
        const contractUser = await EmployeeContract.findAll({
            where: { EmployeeID: employeeID },
            order: [['EndDate', 'DESC']],
            include: {
                model: LaborContract,
                attributes: ['ContractType']
            }
        });
        if (!contractUser) {
            return res.status(400).json({ message: "Kh√¥ng t√¨m th·∫•y h·ª£p ƒë·ªìng c·ªßa nh√¢n vi√™n! "});
        }
        res.json(contractUser);
    } catch (error) {
        res.status(error.message === "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p!" ? 403 : 500).json({
            message: error.message
        });
    }
};

// L·∫•y th√¥ng tin c√¥ng vi·ªác (JobProfile)
exports.getJobProfile = async (req, res) => {
    try {
        const { email, role } = req.user;
        const employeeID = await getEmployeeIDByEmail(email, role);
        
        const jobProfile = await JobProfile.findOne({ where: { EmployeeID: employeeID } });
        const resignation = await Resignation.findOne({ where: { EmployeeID: employeeID}});

        if (!jobProfile) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin c√¥ng vi·ªác" });
        }
        res.json({jobProfile, resignation: resignation || null }); 
        console.log('jobProfile: ', jobProfile);
        console.log('resignation: ', resignation);
    } catch (error) {
        res.status(error.message === "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p!" ? 403 : 500).json({ 
            message: error.message 
        });
    }
};

// L·∫•y th√¥ng tin c√° nh√¢n (PersonalProfile)
exports.getPersonalProfile = async (req, res) => {
    try {
        const { email, role } = req.user;
        const employeeID = await getEmployeeIDByEmail(email, role);
        const personalProfile = await PersonalProfile.findOne({ where: { EmployeeID: employeeID } });

        if (!personalProfile) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin c√° nh√¢n!" });
        }
        res.json(personalProfile);
        console.log("personalProfile: ", personalProfile);
    } catch (error) {
        res.status(error.message === "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p!" ? 403 : 500).json({ 
            message: error.message 
        });
    }
};

// L·∫•y th√¥ng tin ng∆∞·ªùi th√¢n (FamilyMember)
exports.getFamilyMember = async (req, res) => {
    try {
        const { email, role } = req.user;
        const employeeID = await getEmployeeIDByEmail(email, role);
        const familyMembers = await FamilyMember.findAll({ where: { EmployeeID: employeeID } });

        if (!familyMembers || familyMembers.length === 0) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi th√¢n" });
        }
        res.json(familyMembers);
    } catch (error) {
        res.status(error.message === "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p!" ? 403 : 500).json({ 
            message: error.message 
        });
    }
};

// G·ª≠i OTP (Ch·ªâ g·ª≠i khi m·∫≠t kh·∫©u h·ª£p l·ªá)
exports.sendOTP = async (req, res) => {
    try {
        const { email } = req.user;
        const { oldPassword, newPassword, confirmPassword } = req.body;

        const user = await User.findOne({ where: { WorkEmail: email } });
        if (!user) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n!" });
        }
        const isMatch = await verify(user.Password, oldPassword);
        if (!isMatch) {
            return res.status(400).json({ message: "M·∫≠t kh·∫©u c≈© kh√¥ng ch√≠nh x√°c!" });
        }
        if (newPassword !== confirmPassword) {
            return res.status(400).json({ message: "M·∫≠t kh·∫©u m·ªõi kh√¥ng kh·ªõp!" });
        }
        const otp = generateOTP();
        otpStorage[email] = { otp, expiresAt: Date.now() + 60000 };

        const mailOptions = {
            from: `"VNPT Ngh·ªá An" <${EMAIL_USER}>`,
            to: email,
            subject: "M√£ OTP ƒë·ªïi m·∫≠t kh·∫©u",
            text: `M√£ OTP ƒë·ªïi m·∫≠t kh·∫©u c·ªßa b·∫°n l√†: ${otp}. M√£ n√†y c√≥ hi·ªáu l·ª±c trong 1 ph√∫t.`,
        };
        await transporter.sendMail(mailOptions);
        
        res.json({ message: "OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i! H√£y ki·ªÉm tra email c·ªßa b·∫°n!" });
    } catch (error) {
        res.status(500).json({ message: "Kh√¥ng th·ªÉ g·ª≠i OTP!", error: error.message });
    }
};

// ƒê·ªïi m·∫≠t kh·∫©u
exports.ChangePassword = async (req, res) => {
    try {
        console.log(`üîí Y√™u c·∫ßu ƒë·ªïi m·∫≠t kh·∫©u t·ª´ ${req.user.email}`);
        const { email } = req.user;
        const { newPassword, otp } = req.body;

        if (!otpStorage[email] || otpStorage[email].otp !== otp || Date.now() > otpStorage[email].expiresAt) {
            return res.status(400).json({ message: "OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n" });
        }

        delete otpStorage[email]; // X√≥a OTP sau khi s·ª≠ d·ª•ng

        const hashedPassword = await hash(newPassword);
        
        await User.update({ Password: hashedPassword }, { where: { WorkEmail: email } });

        console.log("‚úÖ M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi th√†nh c√¥ng");
        res.json({ message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i." });
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

// API ƒë√°nh d·∫•u th√¥ng b√°o ƒë√£ ƒë·ªçc
exports.markNotificationAsRead = async (req, res) => {
    try {
        const { email, role } = req.user;
        const employeeID = await getEmployeeIDByEmail(email, role);
        const { id } = req.params;

        await UserNotification.upsert({ EmployeeID: employeeID, NotificationID: id, IsRead: true });

        res.json({ message: "Th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u l√† ƒë√£ ƒë·ªçc." });
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

// API x√≥a th√¥ng b√°o
exports.deleteNotification = async (req, res) => {
    try {
        const { email, role } = req.user;
        const employeeID = await getEmployeeIDByEmail(email, role);
        const { id } = req.params;
        const existingRecord = await UserNotification.findOne({ where: { EmployeeID: employeeID, NotificationID: id } });
        if (existingRecord) {
            await existingRecord.update({ IsDeleted: true });
        } else {
            await UserNotification.create({ EmployeeID: employeeID, NotificationID: id, IsDeleted: true });
        }

        res.json({ message: "Th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c x√≥a." });
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

// L·∫•y th√¥ng b√°o
exports.getNotifications = async (req, res) => {
    try {
        const { email, role } = req.user;
        const onlyUnread = req.query.onlyUnread === "true";  // L·∫•y tham s·ªë t·ª´ query
        const employeeID = await getEmployeeIDByEmail(email, role);

        // L·∫•y th√¥ng b√°o ri√™ng v√† chung
        const privateNotifications = await Notification.findAll({
            where: { receivedID: employeeID },
            order: [['CreatedAt', 'DESC']]
        });
        const publicNotifications = await Notification.findAll({
            where: { receivedID: 'All' },
            order: [['CreatedAt', 'DESC']]
        });
        // K·∫øt h·ª£p
        const allNotifications = [...privateNotifications, ...publicNotifications];
        // Ki·ªÉm tra tr·∫°ng th√°i IsDeleted v√† IsRead
        const filteredNotifications = await Promise.all(
            allNotifications.map(async (notification) => {
                const userNotification = await UserNotification.findOne({
                    where: {
                        EmployeeID: employeeID,
                        NotificationID: notification.NotificationID,
                    },
                });

                if (userNotification && userNotification.IsDeleted) {
                    return null; // B·ªè qua n·∫øu ƒë√£ x√≥a
                }
                return {
                    ...notification.toJSON(),
                    IsRead: userNotification ? userNotification.IsRead : false,
                };
            })
        );

        // L·ªçc b·ªè null
        let finalList = filteredNotifications.filter((item) => item !== null);

        // N·∫øu client y√™u c·∫ßu ch·ªâ l·∫•y ch∆∞a ƒë·ªçc th√¨ l·ªçc ti·∫øp:
        if (onlyUnread) {
            finalList = finalList.filter((n) => !n.IsRead);
        }

        const unreadCount = finalList.filter((n) => !n.IsRead).length;

        // Tr·∫£ v·ªÅ client
        res.json({
            notifications: finalList,
            unreadCount: unreadCount,
        });

    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

// L·∫•y ch·∫•m c√¥ng nh√¢n vi√™n
exports.getAttendancesUser = async (req, res) => {
    try {
        const { email, role } = req.user;
        const employeeID = await getEmployeeIDByEmail(email, role);

        const attendancesUser = await Attendance.findAll({
            where: { EmployeeID : employeeID},
            include: [
                {
                    model: Employee, attributes: ['FullName'] 
                },
                {
                    model: PayrollCycle, attributes: ['PayrollName']
                }
            ]
        });
        if (!attendancesUser){
            console.log("Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi th√¢n!");
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ch·∫•m c√¥ng nh√¢n vi√™n!"});
        } 
        res.json(attendancesUser);
        console.log("D·ªØ li·ªáu ch·∫•m c√¥ng: ", attendancesUser);
    } catch (error) {
        res.status(error.message === "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p!" ? 403 : 500).json({message: error.message});
    }
};


// L·∫•y th√¥ng tin overtime 
exports.getOverTimeUser = async (req, res) => {
    try {
        const { email, role } = req.user;
        const employeeID = await getEmployeeIDByEmail(email, role);

        // L·∫•y JobProfile 1-1 theo EmployeeID
        // const jobProfile = await JobProfile.findOne({ where: { EmployeeID: employeeID } });
        
        // L·∫•y danh s√°ch overtime
        const overtimeUser = await OverTime.findAll({
            where: { EmployeeID: employeeID },
            include: [
                { model: Employee, attributes: ['FullName'] },
                { model: PayrollCycle, attributes: ['PayrollName'] }
            ]
        });
        // const managerID = overtimeUser.ManagerID;
        // const employee = await Employee.findOne({ where: { EmployeeID: managerID } });
        
        if (!overtimeUser || overtimeUser.length === 0) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin tƒÉng ca!" });
        }

        // Th√™m Manager t·ª´ jobProfile v√†o t·ª´ng overtime record
        // const overtimeWithManager = overtimeUser.map(item => ({
        //     ...item.toJSON(),  // chuy·ªÉn v·ªÅ object tr∆∞·ªõc khi spread
        //     ManagerName: employee?.FullName || null
        // }));

        res.json(overtimeUser);
    } catch (error) {
        res.status(error.message === "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p!" ? 403 : 500).json({ message: error.message });
    }
};

//request tƒÉng ca
exports.addOvertimeEmployeeRe = async (req, res) => {
    try {
        const { EmployeeID, ManagerID, ReasonOT, OTType, DateTime, OverTimesHours, Status, ID_PayrollCycle, CreatedAt } = req.body;
        await OverTime.create({
            EmployeeID,
            ManagerID,
            ReasonOT,
            OTType,
            DateTime,
            OverTimesHours,
            Status,
            ID_PayrollCycle, 
            CreatedAt 
        });

        res.json({ message: 'T·∫°o th√¥ng tin tƒÉng ca th√†nh c√¥ng!' });
    } catch (error) {
        res.status(500).json({ message: 'C√≥ l·ªói x·∫£y ra khi l∆∞u tƒÉng ca!' });
    }
};

//l·∫•y k·ª≥ l∆∞∆°ng g·∫ßn nh·∫•t
exports.getLatestPayrollCycle = async (req, res) => {
    try {
        const latestPayroll = await PayrollCycle.findOne({
            where: { Status: 'ƒêang x·ª≠ l√Ω'},
        });
        
        if (!latestPayroll) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y l·ª≥ l∆∞∆°ng hi·ªán t·∫°i! "});
        }
        return res.status(200).json(latestPayroll);
    }  catch (error) {
        return res.status(500).json({ message: 'ƒê√£ x·∫£y ra l·ªói m√°y ch·ªß.' });
    }
};

exports.getUserManager = async (req, res) => {
    try {
        const { email, role } = req.user;
        const employeeID = await getEmployeeIDByEmail(email, role);
        //l·∫•y departmentID theo employeeID 
        const employee = await Employee.findOne({ where: { EmployeeID : employeeID}, attributes: ['DepartmentID'] });
        const departmentID = employee.DepartmentID;
        // L·∫•y ra manager t∆∞∆°ng ·ª©ng c·ªßa department
        const managers =  await Employee.findAll({ where: { DepartmentID: departmentID, Position: 'Qu·∫£n l√Ω'}, });
        if (!managers) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin qu·∫£n l√Ω! "});
        }
        return res.status(200).json(managers);
    }  catch (error) {
        return res.status(500).json({ message: 'ƒê√£ x·∫£y ra l·ªói m√°y ch·ªß.' });
    }
};

//L·∫•y th√¥ng tin l∆∞∆°ng nh√¢n vi√™n
exports.getMonthlySalaryUser = async (req, res) => {
    try {
        const { email, role } = req.user;
        const employeeID = await getEmployeeIDByEmail(email, role);
        const jobProfile = await JobProfile.findOne({ where: { EmployeeID: employeeID } });

        const monthlySalaryUser = await MonthlySalary.findAll({
            where: { EmployeeID: employeeID },
            include: [
                { model: Employee, attributes: ['FullName'] },
                { model: PayrollCycle, attributes: ['PayrollName'] }
            ]
        });

        if (!monthlySalaryUser || monthlySalaryUser.length === 0) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin l∆∞∆°ng th√°ng!" });
        }

        const monthlySalaryWithJobProfile = monthlySalaryUser.map(item => ({
            ...item.toJSON(),  // chuy·ªÉn v·ªÅ object tr∆∞·ªõc khi spread
            BaseSalary: jobProfile ? jobProfile.BaseSalary : 0,
            Allowance: jobProfile ? jobProfile.Allowance : 0,
        }));

        res.json(monthlySalaryWithJobProfile);
    } catch (error) {
        res.status(error.message === "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p!" ? 403 : 500).json({ message: error.message });
    }
};
